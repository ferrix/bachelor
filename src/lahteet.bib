@article{heffleymeunier2004,
        author={Heffley,J. and Meunier,P.},
        year={2004},
        title={Can source code auditing software identify common vulnerabilities and be used to evaluate software security?},
        journal={System Sciences, 2004.Proceedings of the 37th Annual Hawaii International Conference on},
        note={ID: IEEE\_XPLORE\_NEW; ID: IEEE/IEE Electronic Library},
        abstract={Software vulnerabilities are a growing problem (c.f. MITRE's CVE, http://eve.mitre.org). Moreover, many of the mistakes leading to vulnerabilities are repeated often. Source code auditing tools could be a great help in identifying common mistakes, or in evaluating the security of software. We investigated the effectiveness of the auditing tools we could access, using the following criteria: number of false positives, false negatives by comparison to known vulnerabilities, and time required to validate the warnings related to vulnerabilities. Some of the known vulnerabilities could not be found by any code auditor, because they were fairly unusual or involved knowledge not contained or codified in the source code. The coding problems that could be identified consisted of string format vulnerabilities, buffer overflows, race conditions, memory leaks, and symlink attacks. However, we found it extremely time-consuming to validate warnings related to the latter four types, because the number of false positives was very high, and because it was not easily apparent if they were real vulnerabilities. These required that the code be audited locally, by people familiar with the code, and carefully inspected to see if the values could be manipulated in such a way as to produce malicious effects. However, the string format vulnerabilities were much easier to recognize. In small and medium scale projects, the open source program Pscan was useful in finding a mix of coding style issues that could potentially enable string format vulnerabilities, as well as actual vulnerabilities. The limitations of Pscan were more obvious in large scale projects like OpenBSD, as more false positives occurred. Clearly, auditing source code for all vulnerabilities remains a time-consuming process, even with the help of the current tools, and more research is needed in identifying and avoiding other common mistakes.},
        isbn={0-7695-2056-1},
        url={http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=1265654},
}

@article{truong2004,
        author={Truong,Nghi},
        year={2004},
        title={Static analysis of students' {J}ava programs},
        journal={ACE '04: Proceedings of the sixth conference on Australasian computing education - Volume 30},
        volume={30},
        note={ID: ACM; ID: ACM - Association for Computing Machinery},
        abstract={A recent industry survey (Townhidnejad and Hilburn, 2002) has reported that more than fifty percent of a software project's budget is spent on activities related to improving software quality. Industry leaders claim that this is caused by the inadequate ...},
        keywords={Java; Web; XML; online learning; static analysis; tutoring system},
        url={http://portal.acm.org/citation.cfm?id=979968.980011&coll=DL&dl=GUIDE&CFID=12476114&CFTOKEN=64400677},
}

@article{taft2008,
        author={Taft,S. T.},
        year={2008},
        title={Systematic {S}canning for {M}alicious {S}ource {C}ode},
        journal={Technologies for Homeland Security, 2008 IEEE Conference on},
        pages={173--175},
        note={ID: IEEE\_XPLORE\_NEW; ID: IEEE/IEE Electronic Library},
        abstract={For an organization that depends on software for important parts of its mission, safety and security flaws in such software are major concerns. Although there is a growing number of tools that can be helpful in identifying unintentionally inserted safety or security flaws, the possibility of intentionally inserted "flaws" or back doors can no longer be ignored. Fundamentally, an intentionally inserted back door can only be recognized by the fact that it does more rather than less of what it is supposed to do. For example, a function that is expected to only query the balance of a bank account, may also, as a side-effect under special circumstances that are unlikely to be encountered during testing, transfer money between accounts. To locate such hidden side-effects, it requires that the semantics of each function somehow be extracted from the source code and presented to a reviewer in a way that allows them to recognize inappropriate actions. In this paper we describe scanning technology that can automatically extract the pre- and post-conditions of every function in the system, including both direct and indirect effects of each function, and present these to a reviewer in human-comprehensible terms. For each external entry point into the system, the postconditions in particular may then be compared against the expected effects of the function, and where potentially inappropriate side- effects are identified, these effects may be traced down through the program to the point where they occur.},
        isbn={978-1-4244-1977-7},
        url={http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=4534444},
}
}


@book{hand2001principles,
  title={{Principles of data mining}},
  author={Hand, D.J. and Mannila, H. and Smyth, P.},
  isbn={026208290X},
  year={2001},
  publisher={The MIT press}
}


@InProceedings{AB95,
  author =	 {Ross J. Anderson and S. Johann Bezuidenhout},
  title =	 {Cryptographic Credit Control in Pre-payment Metering
                  Systems},
  booktitle =	 {1995 IEEE Symposium on Security and Privacy},
  year =	 1995,
  annote =	 {referred 13.4.2000},
}

@Misc{EC96,
  author =	 {{European Commission}},
  title =	 {{Strategic Developments for the European Publishing
                  Industry towards the Year 2000 - Europe's Multimedia
                  Challenge}},
  year =	 1996,
  annote =	 {Beskriver en värdekedjemodell som är indelad i två
                  nivåer; innehåll och infrastruktur. Bas för INDICAs
                  värdekedjemodell.}
}

@techreport{IDReqNom03,
  author =	 {Y. Nomura and R. Walsh and J. Ott and
                  H. Schulzrinne},
  title =	 {{Protocol Requirements for Internet Media Guides}},
  institution =	 {{IETF}},
  year =	 {2003},
  type =	 {Internet Draft},
  month =	 dec,
  note =	 {Work in progress. Expires June, 2004},
  description =	 {Now (Oct 2003) it seems as if the Electronic Service
                  Guide ESG used in IP Datacasting will be based on
                  IMG},
  abstract =	 { This memo specifies requirements for a protocol for
                  accessing and updating Internet Media Guide (IMG)
                  information for media-on-demand and multicast
                  applications. These requirements are designed to
                  guide development of an IMG protocol for efficient
                  and scalable delivery. },
  url =
                  {http://www.ietf.org/internet-drafts/draft-ietf-mmusic-img-req-02.txt}
}

@misc{RFC3550,
  author =	 {H. Schulzrinne and S. Casner and R. Frederic and
                  V. Jacobson},
  title =	 {{RFC 3550: RTP: A Transport Protocol for Real-Time
                  Applications}},
  insitution =	 {{IETF}},
  year =	 2003,
  month =	 jul,
  note =	 {Status: DRAFT STANDARD}
}


@misc{ipdcforum_def,
  title =	 {{About {IP} Datacasting - Overview}},
  author =	 {{IPDC Forum}},
  url =          {http://www.ipdc-forum.org/about/index.html},
  year =         {2004},
  note =	 {{IPDC Forumin WWW-sivu. Viitattu 18.2.2004.}}
}

@MastersThesis{Teekkari2010,
  author = 	 {Teemu Teekkari},
  title = 	 {Diplomityöni},
  school = 	 {Aalto yliopisto},
  year = 	 {2010},
  type = 	 {Diplomityö},
  note =		 {Saatavissa \url{http://www.cis.hut.fi/
teemu/katkotaan/
rivia/
jotta/
helpompi/
katkaista/
sopivasta/
kohtaa/
tamakin/
litania/
poikki/
rtfm.html}. Viitattu 25.1.2011.},
  address = 	 {Espoo}
}

@InCollection{Hinton94,
  author =      {Geoffrey E. Hinton and Richard S. Zemel},
  title =       {Autoencoders, Minimum Description Length and {H}elmholtz
                 Free Energy},
  booktitle =   {Advances in Neural Information Processing Systems 6},
  publisher =   {The MIT Press},
  address =     {Cambridge, MA, USA},
  year =        {1998},
  pages =       {3--10},
  editor =      {Jack D. Cowan and Gerald Tesauro and Joshua Alspector}
}
